It is considered to
be a subfield of Artificial
intelligence, involves learning models, which
allow the program to make
predictions on data, more than
just a list of instructions,
which clearly defines what the
algorithm should do, closely linked
to computational statistics, which uses
computers to make predictions.
The third option here probably
needs some explaining.
A key difference between a
regular algorithm and a machine
learning algo is the “learning”
model which allows the algorithm
to learn from the data,
and make its own decisions.
This allows machines to perform
tasks which otherwise are impossible
for it to perform.

Terms in machine learning:
1:-Training and testing dataset
2:-Type of machine learning tasks
	Supervised learning (Expected outcome defined)
		x1->y1
		x2->y2
		.
		.
		.
		xn->yn
		
		Xunknown->Yunknown
		supervised again can be divided in classification and regression probablem.
			If a supervised learning algorithm
			analyzes the training data, and
			produces an output in classes
			or in a discrete form
			such as 0 or 1,
			then it is called a
			classification problem.
			If the output is continuous,
			then it is called a
			regression problem. 12.1, 12.2, 12.3
	unsupervised learning(Expected outcome not defined)
		The second type of unsupervised
		learning is called clustering.
		Here, the goal is to
		find similarities in the training
		data.
		The assumption in such a
		system is that the clusters
		discovered, will match reasonably well
		with an intuitive classification.
		For example, the clustering of
		individuals based on demographics might
		result in clustering the high
		and low income groups in
		two cluster.
	Reinforcement learning




NumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a 
multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of 
routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, 
I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.

At the core of the NumPy package, is the ndarray object. This encapsulates n-dimensional arrays of homogeneous
data types, with many operations being performed in compiled code for performance

There are several important differences between NumPy arrays and the standard Python sequences:
• NumPy arrays have a fixed size at creation, unlike Python lists. Changing the size of an ndarray will create a 
new array and delete the original.

• The elements in a NumPy array are all required to be of the same data type, and thus will be the same size in
memory. The exception: one can have arrays of (Python, including NumPy) objects, thereby allowing for arrays
of different sized elements.

• NumPy arrays facilitate advanced mathematical and other types of operations on large numbers of data. 
Typically, such operations are executed more efficiently and with less code than is possible using Python’s 
built-in sequences.


for (i = 0; i < rows; i++): {
c[i] = a[i]*b[i];
}


In the case of a 2-D array:-

for (i = 0; i < rows; i++): {
for (j = 0; j < columns; j++): {
c[i][j] = a[i][j]*b[i][j];
}
}


NumPy gives us the best of both worlds:


c = a*b

In Numpy dimensions are called axes. The number of axes is rank.
For example, the coordinates of a point in 3D space [1, 2, 1] is an array of rank 1, because it has one axis. 
That axis has a length of 3. In example pictured below, the array has rank 2 (it is 2-dimensional). 
The first dimension (axis) has a length of 2, the second dimension has a length of 3.

[[ 1., 0., 0.],
[ 0., 1., 2.]]


Numpy’s array class is called ndarray. It is also known by the alias array. Note that numpy.
array is not the same as the Standard Python Library class array.array, which only handles one-dimensional 
arrays and offers less functionality.

ndarray.ndim
the number of axes (dimensions) of the array. In the Python world, the number of dimensions is referred to as rank.

ndarray.shape
the dimensions of the array. This is a tuple of integers indicating the size of the array in each dimension. For
a matrix with n rows and m columns, shape will be (n,m). The length of the shape tuple is therefore the
rank, or number of dimensions, ndim.

ndarray.size
the total number of elements of the array. This is equal to the product of the elements of shape.

ndarray.dtype
an object describing the type of the elements in the array. One can create or specify dtype’s using standard
Python types. Additionally NumPy provides types of its own. numpy.int32, numpy.int16, and numpy.float64
are some examples.

ndarray.itemsize
the size in bytes of each element of the array. For example, an array of elements of type float64
has itemsize 8 (=64/8), while one of type complex32 has itemsize 4 (=32/8). It is equivalent to
ndarray.dtype.itemsize.

>>> import numpy as np
>>> a = np.arange(15).reshape(3, 5)
>>> a
array([[ 0, 1, 2, 3, 4],
[ 5, 6, 7, 8, 9],
[10, 11, 12, 13, 14]])
>>> a.shape
(3, 5)
>>> a.ndim
2
>>> a.dtype.name
'int64'
>>> a.itemsize
8
>>> a.size
15
>>> type(a)
<type 'numpy.ndarray'>
>>> b = np.array([6, 7, 8])
>>> b
array([6, 7, 8])
>>> type(b)
<type 'numpy.ndarray'>

Array creation:-

>>> import numpy as np
>>> a = np.array([2,3,4])
>>> a
array([2, 3, 4])
>>> a.dtype
dtype('int64')
>>> b = np.array([1.2, 3.5, 5.1])
>>> b.dtype
dtype('float64')

>>> a = np.array(1,2,3,4) # WRONG
>>> a = np.array([1,2,3,4]) # RIGHT

>>> b = np.array([(1.5,2,3), (4,5,6)])

The type of the array can also be explicitly specified at creation time:
>>> c = np.array( [ [1,2], [3,4] ], dtype=complex )
>>> c
array([[ 1.+0.j, 2.+0.j],
[ 3.+0.j, 4.+0.j]])

>>> np.zeros( (3,4) )
>>> np.ones( (2,3,4), dtype=np.int16 ) 
>>> np.empty( (2,3) )

To create sequences of numbers, NumPy provides a function analogous to range that returns arrays instead of lists
>>> np.arange( 10, 30, 5 )

Many unary operations, such as computing the sum of all the elements in the array, are implemented as methods of
the ndarray class.
>>> a = np.random.random((2,3))


Universal Functions:-
NumPy provides familiar mathematical functions such as sin, cos, and exp. In NumPy, these are called “universal
functions”(ufunc). Within NumPy, these functions operate elementwise on an array, producing an array as output.
>>> B = np.arange(3)
>>> B
array([0, 1, 2])
>>> np.exp(B)
array([ 1. , 2.71828183, 7.3890561 ])
>>> np.sqrt(B)
10 Chapter 2. Quickstart tutorial
NumPy User Guide, Release 1.11.0
array([ 0. , 1. , 1.41421356])
>>> C = np.array([2., -1., 4.])
>>> np.add(B, C)
array([ 2., 0., 6.])



Indexing, Slicing and Iterating:-

One-dimensional arrays can be indexed, sliced and iterated over, much like lists and other Python sequences.
>>> a = np.arange(10)**3
>>> a
array([ 0, 1, 8, 27, 64, 125, 216, 343, 512, 729])
>>> a[2]
8
>>> a[2:5]
array([ 8, 27, 64])
>>> a[:6:2] = -1000 # equivalent to a[0:6:2] = -1000; from start to position 6, exclusive, set every 2nd element to -1000
>>> a
array([-1000, 1, -1000, 27, -1000, 125, 216, 343, 512, 729])
>>> a[ : :-1] # reversed a
array([ 729, 512, 343, 216, 125, -1000, 27, -1000, 1, -1000])
>>> for i in a:
... print(i**(1/3.))


Multidimensional arrays can have one index per axis. These indices are given in a tuple separated by commas:
>>> def f(x,y):
... return 10*x+y
...
>>> b = np.fromfunction(f,(5,4),dtype=int)
>>> b
array([[ 0, 1, 2, 3],
[10, 11, 12, 13],
[20, 21, 22, 23],
[30, 31, 32, 33],
[40, 41, 42, 43]])
>>> b[2,3]
23
>>> b[0:5, 1] # each row in the second column of b
array([ 1, 11, 21, 31, 41])

terating over multidimensional arrays is done with respect to the first axis:
>>> for row in b:
... print(row)
...
[0 1 2 3]
[10 11 12 13]
[20 21 22 23]
[30 31 32 33]
[40 41 42 43]
However, if one wants to perform an operation on each element in the array, one can use the flat attribute which is
an iterator over all the elements of the array:
>>> for element in b.flat:
... print(element)













NumPy, mathematical and logical operations on arrays can be performed.

NumPy is often used along with packages like SciPy (Scientific Python) and Mat−plotlib (plotting library).
This combination is widely used as a replacement for MatLab, a popular platform for technical computing. 
However,Python alternative to MatLab is now seen as a more modern and complete programming language.


NumPy is an N-dimensional array type called ndarray.
	
Linear alzebric operations

import numpy as np 
a = np.array([1,2,3]) 
print a

import numpy as np 
a = np.array([[1, 2], [3, 4]]) 
print a

import numpy as np 
a = np.array([1, 2, 3,4,5], ndmin = 2) 
print a

import numpy as np 
a = np.array([1, 2, 3], dtype = complex) 
print a


Data Type Objects (dtype):-
A data type object describes interpretation of fixed block of memory corresponding to an array, 
depending on the following aspects −
	Type of data (integer, float or Python object)

	Size of data

	Byte order (little-endian or big-endian)

	In case of structured type, the names of fields, data type of each field and part of the memory block taken by each field.

	If data type is a subarray, its shape and data type
	
1:-================================	
l = [1,2,3.9]#collection of different data type

so when you will convert in np array, This will convert in one format
np.array(l) #output:- [1.,2.,3.9]
2:-==============================
Data type precedence:-
Bool
integer
float
String
np.array([1,23,4],dtype=float)#this will covert all object into float
simiarly
dtype='U'
np.array([12345,2,6,8,9],dtype='<U2')#limit char to 2 so output:-['12','2','6','8','9']
dtype = complex
3:-===========================
np.array([('ram',26,1000.0),('shyam',34,540)],dtype=[('name','<U15'),('age','int32'),('salary','<f4')])
====================================================
What is multi dimension?

name, age, salary now 3rd dimension is let say department, 4th dimension let say company likewise 
we can have n number of dimension .
=========================================
two_dime = [(1,2,3,45,5),(9,8,7,7,5)]
two_arr = np.array(two_dime)
print (two_arr.shape)
print (two_arr.ndim)
print (two_arr.dtype)
print (two_arr.size)

=====================================================
three_arra = np.array([[[1,2,3],[4,5,6]],[[5,6,7],[6,7,8]]])


NumPy Important function:-
numpy.zeros(shape)# create an array full of zero with given shape
numpy.ones(shape)# create an array full of one with given shape
numpy.empty(shape)# create an array whose initial content is random
numpy.eye(integer)# creates an identity matrix with shape of (integer, integer)



np.ones((2,3,4), dtype=np.int32)
np.zeros((3,4))
np.empty((2,3))
a = np.eye(2)
np.diag(a)#It will give diagonal value of matrix

==========================
np.arange(10,30,5)
          start, end, interval

		  
np.linspace(1,100,10)
			start, end, no_of_occurance_at_equal_dista

python -mpip install matplotlib
#prerequisit:-the Microsoft Visual C++ 2008 or Microsoft Visual C++ 2010.

#Printing array:-
np.arange(9)
[0,1,2,3,4,5,6,7,8]
np.arange(12).reshape(2,2,3)#update shape
plt.plot(np.random.randn(100))
plt.show()

plt.plot(np.random.randn(100))
plt..show()


Basic operations with numpy:-
a = np.array([20,39,41,56])
b = np.arange(1,5)
add = a + b
sub = a - b
mul = a*b
div = a / b

 a<35#outputarray([ True, False, False, False])

Matrix Multiplication:-
>>> a=np.array([[2,3],[1,4]])
>>> b=np.array([[6,4],[7,5]])
>>> np.mat(a)
matrix([[2, 3],
        [1, 4]])
		
>>> A = np.mat(a)
>>> B = np.mat(b)
>>> A*B
matrix([[33, 23],
        [34, 24]])
		
		
>>>a.dot(b)#This is similar to above 3 step
========================================
(3,2)*(2,2) multiplication #Result (3,2) mtrics

>>> c = np.array([[2,3],[3,4],[3,4]])
>>> d = np.array([[2,2],[3,4]])
>>> c.dot(d)
array([[13, 16],
       [18, 22],
       [18, 22]])

================================
>>> a
array([[2, 3],
       [1, 4]])
>>> np.mat(a).sum()
10
>>> np.mat(a).min
<bound method matrix.min of matrix([[2, 3],
        [1, 4]])>
>>> np.mat(a).min()
1
>>> np.mat(a).max()
4
>>> np.mat(a).mean()
2.5
>>> np.mat(a).std()
1.118033988749895
>>> np.mat(a).sum(axis=0)
matrix([[3, 7]])
>>> np.mat(a).sum(axis=1)
matrix([[5],
        [5]])
		
		
		
Reading input from csv
import numpy as np
data = np.genfromtxt(fileName, delimeter=',', usecols= np.arange(2,7),skip_header=True)

		
		

=============================
Indexing slicing and iterating
Lets create a matrix of(5,4) and then find A[2:4, 1:3]
A=[[0  1  2  3 ]
  [4  5  6  7 ]
  [8  9  10 11]
  [12 13 14 15]
  [16 17 18 19]]
  
A[2:4, 1:3] =([[9  10]
              [13 14]])		

A(2,3)= 11
A[0:3,1]=array([1,5,9])
============================================
Dtype:

import numpy as np 

student = np.dtype([('name','S20'), ('age', 'i1'), ('marks', 'f4')]) 
a = np.array([('abc', 21, 50),('xyz', 18, 75)], dtype = student) 
print a

USERNAME_CHECKBOXES = "checkboxes__section "
PLACEHOLDER_TEXT = "field__checkbox__placeholder "
'b' − boolean

'i' − (signed) integer

'u' − unsigned integer

'f' − floating-point

'c' − complex-floating point

'm' − timedelta

'M' − datetime

'O' − (Python) objects

'S', 'a' − (byte-)string

'U' − Unicode

'V' − raw data (void)


numpy.frombuffer
This function interprets a buffer as one-dimensional array. 
Any object that exposes the buffer interface is used as parameter to return an ndarray.



numpy.arange
This function returns an ndarray object containing evenly spaced values within a given range. The format of the function is as follows −

numpy.arange(start, stop, step, dtype)
1:-
import numpy as np 
x = np.arange(5) 
print x

2:-
import numpy as np 
# dtype set 
x = np.arange(5, dtype = float)
print x

3:-
import numpy as np 
x = np.arange(10,20,2) 
print x

Integer Indexing

import numpy as np 
1:-
x = np.array([[1, 2], [3, 4], [5, 6]]) 
y = x[[0,1,2], [0,1,0]] 
print y

elements at (0,0), (1,1) and (2,0) from the first array.

Boolean Array Indexing======

import numpy as np 
x = np.array([[ 0,  1,  2],[ 3,  4,  5],[ 6,  7,  8],[ 9, 10, 11]]) 

print 'Our array is:' 
print x 
print '\n'  

# Now we will print the items greater than 5 
print 'The items greater than 5 are:' 
print x[x > 5]
===============================================================================
Before broadcastin
import numpy as np 

a = np.array([1,2,3,4]) 
b = np.array([10,20,30,40]) 
c = a * b 
print c


Broadcasting
If the dimensions of two arrays are dissimilar, element-to-element operations are not possible. 
However, operations on arrays of non-similar shapes is still possible in NumPy, because of the broadcasting capability. 
The smaller array is broadcast to the size of the larger array so that they have compatible shapes.

import numpy as np 
a = np.array([[0.0,0.0,0.0],[10.0,10.0,10.0],[20.0,20.0,20.0],[30.0,30.0,30.0]]) 
b = np.array([1.0,2.0,3.0])  
   
print 'First array:' 
print a 
print '\n'  
   
print 'Second array:' 
print b 
print '\n'  
   
print 'First Array + Second Array' 
print a + b

=======================================================
Iterating Over Array

import numpy as np
a = np.arange(0,60,5)
a = a.reshape(3,4)

print 'Original array is:'
print a
print '\n'

print 'Modified array is:'
for x in np.nditer(a):
   print x,
   
   
   
we can accomplish five typical steps in the processing and analysis of data, regardless of the origin of 
data — load, prepare, manipulate, model, and analyze.   

Fast and efficient DataFrame object with default and customized indexing.
Tools for loading data into in-memory data objects from different file formats.
Data alignment and integrated handling of missing data.
Reshaping and pivoting of date sets.
Label-based slicing, indexing and subsetting of large data sets.
Columns from a data structure can be deleted or inserted.
Group by data for aggregation and transformations.
High performance merging and joining of data.



Pandas deals with the following three data structures −

Series
DataFrame
Panel

1:-
Series is a one-dimensional array like structure with homogeneous data. For example, the following series is a collection of integers 10, 23, 56,
Key Points
Homogeneous data
Size Immutable
Values of Data Mutable

2:-
DataFrame is a two-dimensional array with heterogeneous data.
Name		Age		Gender		Rating
Steve		32		M			4
a			67		F			5
Key Points
Heterogeneous data
Size Mutable
Data Mutable

3:-
Panel is a three-dimensional data structure with heterogeneous data. It is hard to represent the panel in graphical representation. 
But a panel can be illustrated as a container of DataFrame.

Key Points
Heterogeneous data
Size Mutable
Data Mutable